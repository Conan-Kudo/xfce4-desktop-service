#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
#  xfce4-desktop-service
#
#  Copyright 2022 Thomas Castleman <contact@draugeros.org>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
#
"""Desktop Service for xfce4

This service provides desktop icon's functionality in the absence of Thunar
"""
import subprocess
from sys import argv, stderr
from shutil import copyfile, rmtree, SameFileError, copytree
from ctypes import cdll, byref, create_string_buffer
from pwd import getpwuid
import os
import signal
import urllib.parse
import dbus
import dbus.service
from dbus.mainloop.glib import DBusGMainLoop
import gi
import magic
import psutil
gi.require_version('Gtk', '3.0')
gi.require_version('Gdk', '3.0')
from gi.repository import GLib, Gtk, Gdk, Gio


# Octal Translation Dict
octal_perms = {0: "No Permissions",
               1: "Execute",
               2: "Write",
               3: "Write, Execute",
               4: "Read",
               5: "Read, Execute",
               6: "Read, Write",
               7: "Full Permissions"}
# PID File location
proc_name = "xfce4-desktop-service"
HOME = os.environ["HOME"]
VERSION = "0.2.5-alpha2"


class GUI_defaults(Gtk.Window):
    """Default Window functions"""
    def exit(self, message):
        self.destroy()
        Gtk.main_quit("delete-event")

    def on_key_press_event(self, widget, event):
        """Handles keyy press events for window"""
        if event.keyval == Gdk.KEY_Escape:
            self.exit("esc key pressed")

    def _set_default_margins(self, widget):
        """Set default margin size"""
        widget.set_margin_start(10)
        widget.set_margin_end(10)
        widget.set_margin_top(10)
        widget.set_margin_bottom(10)
        return widget

    def clear_window(self):
        """Clear Window"""
        children = self.grid.get_children()
        for each0 in children:
            self.grid.remove(each0)


class signal_handlers(dbus.service.Object):
    """Signal Handlers for DBus"""

    @dbus.service.method("org.xfce.FileManager1", in_signature='ass', out_signature='')
    def ShowFolders(self, uris, startupId):
        """Open folder passed in the default file manager"""
        xdg_open(uris[0])

    @dbus.service.method("org.xfce.FileManager1", in_signature='ass', out_signature='')
    def ShowItems(self, uris, startupId):
        """Open items passed in with the default method"""
        xdg_open(uris[0])

    @dbus.service.method("org.xfce.FileManager1", in_signature='ass', out_signature='')
    def ShowItemProperties(self, uris, startupId):
        """Show Properties of Item"""
        xdg_open(uris[0])

    @dbus.service.method("org.xfce.FileManager1", in_signature='', out_signature='')
    def Exit(self):
        """Quit"""
        mainloop.quit()

    @dbus.service.method("org.xfce.FileManager", in_signature='sss', out_signature='')
    def Launch(self, uri, display, startup_id):
        """Launch uri"""
        xdg_open(uri)

    @dbus.service.method("org.xfce.FileManager", in_signature='ssasss', out_signature='')
    def Execute(self, working_directory, uri, filenames, display, startup_id):
        """Execute uri"""
        xdg_open(uri)

    @dbus.service.method("org.xfce.FileManager", in_signature='sasss', out_signature='')
    def LaunchFiles(self, working_directory, filenames, display, startup_id):
        """Launch multiple files"""
        for each in filenames:
            xdg_open(each)

    @dbus.service.method("org.xfce.FileManager", in_signature='sss', out_signature='')
    def DisplayFolder(self, uri, display, startup_id):
        """Open Folder"""
        xdg_open(uri)

    @dbus.service.method("org.xfce.FileManager", in_signature='sasasss', out_signature='')
    def CopyTo(self, working_directory, source_files, target_files, display, startup_id):
        """Copy files from Point A to Point B"""
        for each in range(len(source_files)):
            source_files[each] = parse_uri(source_files[each])
            target_files[each] = parse_uri(target_files[each])
            try:
                copyfile(source_files[each], target_files[each])
            except SameFileError:
                pass
            except IsADirectoryError:
                copytree(source_files[each], target_files[each])

    @dbus.service.method("org.xfce.FileManager", in_signature='ssss', out_signature='')
    def CreateFile(self, parent_directory, content_type, display, startup_id):
        """Create a New File"""
        name = show_naming_GUI(content_type, None)

        if content_type == "inode/directory":
            is_directory = True
        else:
            is_directory = False

        self._custom_create_file(parent_directory, name, is_directory)


    @dbus.service.method("org.xfce.FileManager", in_signature='sasss', out_signature='')
    def UnlinkFiles(self, working_directory, filenames, display, startup_id):
        """Delete multiple files"""
        for each in filenames:
            each = parse_uri(each)
            try:
                os.remove(each)
            except IsADirectoryError:
                rmtree(each)

    @dbus.service.method("org.xfce.FileManager", in_signature='sss', out_signature='')
    def RenameFile(self, filename, display, startup_id):
        """Rename a file"""
        filename = parse_uri(filename)
        self._custom_rename_file(filename)

    @dbus.service.method("org.xfce.FileManager", in_signature='ssss', out_signature='')
    def CreateFileFromTemplate(self, parent_directory, template_path, display, startup_id):
        """Create a new file from the specified template"""
        template_path = template_path.split("/")
        parent_directory = parent_directory + "/" + template_path[-1]
        template_path = "/".join(template_path)
        self.CopyTo(None, [template_path], [parent_directory], None, None)
        result = self._custom_rename_file(parent_directory)
        if result == 1:
            self.UnlinkFiles("", [parent_directory], "", "")

    @dbus.service.method("org.xfce.FileManager", in_signature='sbss', out_signature='')
    def DisplayChooserDialog(self, path, to_open, display, startup_id):
        """Disaply Application Chooser Dialog"""
        path = parse_uri(path)
        choosing_dialog(path, to_open)


    @dbus.service.method("org.xfce.Trash", in_signature='ss', out_signature='')
    def DisplayTrash(self, display, startup_id):
        """Open Trash folder"""
        subprocess.Popen(["xdg-open", "trash://"])

    @dbus.service.method("org.xfce.Trash", in_signature='asss', out_signature='')
    def MoveToTrash(self, filenames, display, startup_id):
        """Move file/folder to trash"""
        args = ["gio", "trash"]
        for uri in filenames:
            path = str(uri)
            path = parse_uri(path)
            args.append(path)
            if os.fork() == 0:
                subprocess.Popen(args)
                args = ["gio", "trash"]
                os._exit(0)
            else:
                os.wait()
            args = ["gio", "trash"]

    @dbus.service.method("org.xfce.Trash", in_signature='ss', out_signature='')
    def EmptyTrash(self, display, startup_id):
        """Empty trash"""
        subprocess.Popen(["gio", "trash", "--empty"])

    @dbus.service.method("org.xfce.FileManager", in_signature='sss', out_signature='')
    def DisplayFileProperties(self, uri, display, startup_id):
        """Show file properties"""
        path = str(uri)
        path = parse_uri(path)
        show_properties_GUI(path)

    def _custom_create_file(self, parent_directory, file_name, is_directory):
        if len(file_name) == 0:
            return

        if file_name[-1] == 1:
            return
        if isinstance(file_name, list):
            file_name = file_name[0]

        parent_directory = parse_uri(parent_directory)

        if is_directory:
            try:
                os.mkdir(parent_directory + "/" + file_name)
            except FileExistsError:
                if show_error_GUI(False):
                    self.CreateFile(parent_directory, "inode/directory", 0, 0)
            except IsADirectoryError:
                if show_error_GUI(True):
                    self.CreateFile(parent_directory, "inode/directory", 0, 0)
        else:
            if os.path.isfile(parent_directory + "/" + file_name):
                if show_error_GUI(False):
                    self.CreateFile(parent_directory, "file", 0, 0)
                return
            try:
                with open(parent_directory + "/" + file_name, "w+") as new_file:
                    new_file.write("")
            except FileExistsError:
                if show_error_GUI(False):
                    self.CreateFile(parent_directory, "file", 0, 0)
            except IsADirectoryError:
                if show_error_GUI(True):
                    self.CreateFile(parent_directory, "file", 0, 0)


    def _custom_rename_file(self, file_name):
        '''renames a file'''
        # prep for naming GUI
        path = parse_uri(file_name)
        content_type = self._find_content_type(path)

        # use UI to get new filename from user
        name = show_naming_GUI(content_type, (path.split("/"))[-1])

        # the case where the user exited instead of entering a filename
        if name[-1] == 1:
            return 1

        try:
            # perform the rename action and return code
            self._rename(name[0], path)
        except (ValueError, IsADirectoryError, FileExistsError):
            if show_error_GUI(False):
                return self._custom_rename_file(file_name)
            return 1

        return 0

    def _find_content_type(self, path):
        '''determines if path is directory or file for renaming'''
        if os.path.isdir(path):
            return "inode/directory"
        else:
            return "file"


    def _rename(self, new_filename, old_absolute_filename):
        """renames a file
        Keyword arguments:
        new_filename (String) -- new filename string
        old_filename_w_path (String) -- the full filename with absolute path

        Exceptions
        ValueError -- new_filename is empty or null byte
        """
        if new_filename == "":
            raise ValueError("rename method passed empty filename")

        # ammend the new_filename on the old path
        split_path = old_absolute_filename.split("/")
        del split_path[-1] # remove the old filename
        split_path = "/".join(split_path) # add an "/" at the end
        new_path = split_path + "/" + new_filename

        if os.path.exists(new_path):
            raise FileExistsError()

        os.rename(old_absolute_filename, new_path)

    @dbus.service.method("org.xfce.FileManager", in_signature='sassss', out_signature='')
    def MoveInto(self, working_directory, source_filenames, target_filename, display, startup_id):
        """Move files into a given directory"""
        src = parse_uri(source_filenames[0])
        target = parse_uri(target_filename)
        try:
            shutil.move(src, target)
        except (OSError, PermissionError) as e:
            eprint("Cannot Move File or Directory: Permission or OS Error")
            eprint("You either do not have permission to write to this directory, or the directory is read-only.")


class error_GUI(GUI_defaults):
    """Show errors without crashing the back-end"""
    def __init__(self, content_type):
        if content_type:
            content_type = "directory"
        else:
            content_type = "file"

        self.content_type = content_type

        # Initialize the Window
        Gtk.Window.__init__(self, title="Desktop Service")
        self.grid = Gtk.Grid(orientation=Gtk.Orientation.VERTICAL)
        self.add(self.grid)
        self.set_icon_name("desktop-environment-xfce")

        self.label = Gtk.Label()
        self.label.set_markup("""
    A %s with that name already exists.\t""" % (content_type))
        self.label.set_justify(Gtk.Justification.LEFT)
        self.label = self._set_default_margins(self.label)
        self.grid.attach(self.label, 1, 1, 3, 1)

        # enable window to receive key press events
        self.connect("key-press-event", self.on_key_press_event)

        button1 = Gtk.Button.new_with_label("Retry -->")
        button1.connect("clicked", self.retry)
        button1.set_can_default(True)
        button1 = self._set_default_margins(button1)
        self.grid.attach(button1, 3, 3, 1, 1)

        button2 = Gtk.Button.new_with_label("Cancel")
        button2.connect("clicked", self.cancel)
        button2.set_can_default(False)
        button2 = self._set_default_margins(button2)
        self.grid.attach(button2, 1, 3, 1, 1)

        self.retry_flag = False

        self.set_default(button1)
        # button1.grab_default() would be the preferred way to set default
        # but that function does not seem to work properly at this time

    def __quit__(self):
        self.destroy()
        Gtk.main_quit("delete-event")

    def retry(self, widget):
        """Set retry flag"""
        self.retry_flag = True
        self.__quit__()

    def cancel(self, widget):
        """Ensure retry flag is off"""
        self.retry_flag = False
        self.__quit__()

class naming_GUI(GUI_defaults):
    """UI for naming Files/Folders"""
    def __init__(self, content_type, name):
        if content_type == "inode/directory":
            content_type = "directory"
        else:
            content_type = "file"

        if name is None:
            if content_type == "file":
                name = "Untitled File"
            elif content_type == "directory":
                name = "Untitled Folder"

        self.content_type = content_type

        # Initialize the Window
        Gtk.Window.__init__(self, title="Desktop Service")
        self.grid = Gtk.Grid(orientation=Gtk.Orientation.VERTICAL)
        self.add(self.grid)
        self.set_icon_name("desktop-environment-xfce")

        self.label = Gtk.Label()
        self.label.set_markup("""
    What would you like to name this %s?\t""" % (content_type))
        self.label.set_justify(Gtk.Justification.LEFT)
        self.label = self._set_default_margins(self.label)
        self.grid.attach(self.label, 1, 1, 3, 1)

        self.name = Gtk.Entry()
        self.name.set_text(name)
        self.name.set_can_default(False)
        self.name.set_can_focus(True)
        self.name.set_activates_default(True)
        self.name = self._set_default_margins(self.name)
        self.grid.attach(self.name, 1, 2, 3, 1)
        self.name.grab_focus()

        # enable window to receive key press events
        self.connect("key-press-event", self.on_key_press_event)

        button1 = Gtk.Button.new_with_label("Okay -->")
        button1.connect("clicked", self.done)
        button1.set_can_default(True)
        button1 = self._set_default_margins(button1)
        self.grid.attach(button1, 3, 3, 1, 1)

        button2 = Gtk.Button.new_with_label("Exit")
        button2.connect("clicked", self.exit)
        button2.set_can_default(False)
        button2 = self._set_default_margins(button2)
        self.grid.attach(button2, 1, 3, 1, 1)

        self.set_name = None

        self.set_default(button1)
        # button1.grab_default() would be the preferred way to set default
        # but that function does not seem to work properly at this time

    def done(self, button):
        """Return Data"""
        self.set_name = [self.name.get_text(), 0]
        if "/" in self.set_name[0]:
            self.label.set_markup("""
    What would you like to name this %s?\t

    <b>Character `/' not allowed in %s names.</b>\t""" % (self.content_type,
                                                          self.content_type))
        elif (("\0" in self.set_name[0]) or ("\x00" in self.set_name[0])):
            self.label.set_markup("""
    What would you like to name this %s?\t

    <b>Null Character not allowed in %s names.</b>\t
    You likely have either '\\0' or '\\x00' in your %s name.\t
    Please remove it to continue.\t""" % (self.content_type,
                                          self.content_type,
                                          self.content_type))

        elif self.set_name[0] in ("", None):
            self.label.set_markup("""
    What would you like to name this %s?\t

    Empty %s names not allowed.\t""" % (self.content_type,
                                        self.content_type))
        else:
            self.destroy()
            Gtk.main_quit("delete-event")
            return self.set_name
        self.show_all()

    def exit(self, message):
        """Exit UI"""
        self.set_name = [1]
        self.destroy()
        Gtk.main_quit("delete-event")
        return self.set_name


class choosing_dialog():
    """Choose Non-Default Application to open file with"""
    def __init__(self, file_path, to_open):
        """Initialize"""
        # Initialize the window
        self.file_path = file_path
        self.to_open = to_open
        file = Gio.File.new_for_path(file_path)
        app_chooser = Gtk.AppChooserDialog.new(None,
                                               Gtk.DialogFlags.MODAL,
                                               file)
        app_chooser.connect("response", self.on_response)
        app_chooser.set_heading("Select which app to open the file with from the list below")
        app_chooser.show_all()

    def on_response(self, dialog, response):
        if response == Gtk.ResponseType.OK:
            app_info = dialog.get_app_info()
            if self.to_open:
                cmd = app_info.get_commandline().split(" ")
                replaced = False
                if "%F" in cmd:
                    cmd[cmd.index("%F")] = self.file_path
                    replaced = True
                if "%f" in cmd:
                    if not replaced:
                        cmd[cmd.index("%f")] = self.file_path
                        replaced = True
                    else:
                        del cmd[cmd.index("%f")]
                if "%U" in cmd:
                    if not replaced:
                        cmd[cmd.index("%U")] = self.file_path
                        replaced = True
                    else:
                        del cmd[cmd.index("%U")]
                if "%u" in cmd:
                    if not replaced:
                        cmd[cmd.index("%u")] = self.file_path
                        replaced = True
                    else:
                        del cmd[cmd.index("%u")]
                subprocess.Popen(cmd)
            else:
                file_type = self.file_path.split(".")[-1]
                app_info.set_as_default_for_extension(file_type)

        dialog.destroy()

class properties_GUI(GUI_defaults):
    """Properties GUI"""
    def __init__(self, file_path):
        """Initialize Properties GUI"""
        self.file_path = file_path.replace(HOME, "~")
        self.file_name = self.file_path.split("/")[-1]
        mime = magic.Magic(mime=True)

        try:
            self.file_mime = mime.from_file(file_path)
            self.file_size = os.path.getsize(file_path)
        except IsADirectoryError:
            self.file_mime = "inode/directory"
            self.file_size = None

        self.file_permissions = str(oct(os.stat(file_path).st_mode)[-3:])
        self.file_owner = getpwuid(os.stat(file_path).st_uid).pw_name
        self.file_group = getpwuid(os.stat(file_path).st_gid).pw_name

        Gtk.Window.__init__(self, title="Desktop Service")

        # enable window to receive key press events
        self.connect("key-press-event", self.on_key_press_event)

        self.grid = Gtk.Grid(orientation=Gtk.Orientation.VERTICAL)
        self.page0 = Gtk.Grid(orientation=Gtk.Orientation.VERTICAL)
        self.page1 = Gtk.Grid(orientation=Gtk.Orientation.VERTICAL)
        self.add(self.grid)
        self.set_icon_name("desktop-environment-xfce")

        self.main("clicked")

    def main(self, button):
        """Main properties window"""
        self.stack = Gtk.Stack()
        self.stack.add_titled(self.page0, "page0", "Basic")
        self.stack.add_titled(self.page1, "page1", "Permissions")
        self.stack = self._set_default_margins(self.stack)
        self.grid.attach(self.stack, 1, 2, 4, 1)

        self.stack_switcher = Gtk.StackSwitcher()
        self.stack_switcher.set_stack(self.stack)
        self.stack_switcher = self._set_default_margins(self.stack_switcher)
        self.grid.attach(self.stack_switcher, 2, 1, 2, 1)

        self.label = Gtk.Label()
        self.label.set_markup("""\n\tName:\t""")
        self.label.set_justify(Gtk.Justification.LEFT)
        self.label = self._set_default_margins(self.label)
        self.page0.attach(self.label, 1, 1, 1, 1)

        self.label1 = Gtk.Label()
        self.label1.set_markup("\n\t" + self.file_name + "\t")
        self.label1.set_justify(Gtk.Justification.LEFT)
        self.label1 = self._set_default_margins(self.label1)
        self.page0.attach(self.label1, 2, 1, 1, 1)

        self.label2 = Gtk.Label()
        self.label2.set_markup("""\n\tType:\t""")
        self.label2.set_justify(Gtk.Justification.LEFT)
        self.label2 = self._set_default_margins(self.label2)
        self.page0.attach(self.label2, 1, 2, 1, 1)

        self.label3 = Gtk.Label()
        self.label3.set_markup("\n\t" + self.file_mime + "\t")
        self.label3.set_justify(Gtk.Justification.LEFT)
        self.label3 = self._set_default_margins(self.label3)
        self.page0.attach(self.label3, 2, 2, 1, 1)

        self.label4 = Gtk.Label()
        self.label4.set_markup("""\n\tLocation:\t""")
        self.label4.set_justify(Gtk.Justification.LEFT)
        self.label4 = self._set_default_margins(self.label4)
        self.page0.attach(self.label4, 1, 3, 1, 1)

        self.label5 = Gtk.Label()
        self.label5.set_markup("\n\t" + self.file_path + "\t")
        self.label5.set_justify(Gtk.Justification.LEFT)
        self.label5 = self._set_default_margins(self.label5)
        self.page0.attach(self.label5, 2, 3, 1, 1)

        self.label6 = Gtk.Label()
        self.label6.set_markup("""\n\tOwner:\t""")
        self.label6.set_justify(Gtk.Justification.LEFT)
        self.label6 = self._set_default_margins(self.label6)
        self.page1.attach(self.label6, 1, 1, 1, 1)

        self.label7 = Gtk.Label()
        self.label7.set_markup("\n\t" + self.file_owner + "\t")
        self.label7.set_justify(Gtk.Justification.LEFT)
        self.label7 = self._set_default_margins(self.label7)
        self.page1.attach(self.label7, 2, 1, 1, 1)

        perms = translate_full_octal(self.file_permissions)
        owner_perms = perms[0]
        group_perms = perms[1]
        public_perms = perms[2]

        self.label8 = Gtk.Label()
        self.label8.set_markup("""\n\tOwner\n\tPermissions:\t""")
        self.label8.set_justify(Gtk.Justification.LEFT)
        self.label8 = self._set_default_margins(self.label8)
        self.page1.attach(self.label8, 1, 2, 1, 1)

        self.label9 = Gtk.Label()
        self.label9.set_markup("\n\t" + owner_perms + "\t")
        self.label9.set_justify(Gtk.Justification.LEFT)
        self.label9 = self._set_default_margins(self.label9)
        self.page1.attach(self.label9, 2, 2, 1, 1)

        self.label10 = Gtk.Label()
        self.label10.set_markup("""\n\tGroup:\t""")
        self.label10.set_justify(Gtk.Justification.LEFT)
        self.label10 = self._set_default_margins(self.label10)
        self.page1.attach(self.label10, 1, 3, 1, 1)

        self.label11 = Gtk.Label()
        self.label11.set_markup("\n\t" + self.file_group + "\t")
        self.label11.set_justify(Gtk.Justification.LEFT)
        self.label11 = self._set_default_margins(self.label11)
        self.page1.attach(self.label11, 2, 3, 1, 1)

        self.label12 = Gtk.Label()
        self.label12.set_markup("""\n\tGroup\n\tPermissions:\t""")
        self.label12.set_justify(Gtk.Justification.LEFT)
        self.label12 = self._set_default_margins(self.label12)
        self.page1.attach(self.label12, 1, 4, 1, 1)

        self.label13 = Gtk.Label()
        self.label13.set_markup("\n\t" + group_perms + "\t")
        self.label13.set_justify(Gtk.Justification.LEFT)
        self.page1.attach(self.label13, 2, 4, 1, 1)

        self.label14 = Gtk.Label()
        self.label14.set_markup("""\n\tPublic\n\tPermissions:\t""")
        self.label14.set_justify(Gtk.Justification.LEFT)
        self.label14 = self._set_default_margins(self.label14)
        self.page1.attach(self.label14, 1, 5, 1, 1)

        self.label15 = Gtk.Label()
        self.label15.set_markup("\n\t" + public_perms + "\t")
        self.label15.set_justify(Gtk.Justification.LEFT)
        self.label15 = self._set_default_margins(self.label15)
        self.page1.attach(self.label15, 2, 5, 1, 1)

        self.button1 = Gtk.Button.new_with_label("Delete")
        self.button1.connect("clicked", self.delete)
        self.button1 = self._set_default_margins(self.button1)
        self.grid.attach(self.button1, 4, 3, 1, 1)

        self.button2 = Gtk.Button.new_with_label("Exit")
        self.button2.connect("clicked", self.exit)
        self.button2 = self._set_default_margins(self.button2)
        self.grid.attach(self.button2, 1, 3, 1, 1)

    def delete(self, button):
        """Confirm file/folder deletion"""
        self.clear_window()

        if self.file_mime == "inode/directory":
            text = """Are you sure you want to delete this directory?"""
        else:
            text = """Are you sure you want to delete this file?"""
        label = Gtk.Label()
        label.set_markup(text)
        label.set_justify(Gtk.Justification.LEFT)
        label = self._set_default_margins(label)
        self.grid.attach(label, 1, 1, 2, 1)

        self.button1 = Gtk.Button.new_with_label("Delete")
        self.button1.connect("clicked", self.delete_action)
        self.button1 = self._set_default_margins(self.button1)
        self.grid.attach(self.button1, 2, 2, 1, 1)

        self.button2 = Gtk.Button.new_with_label("Cancel")
        self.button2.connect("clicked", self.main)
        self.button2 = self._set_default_margins(self.button2)
        self.grid.attach(self.button2, 1, 2, 1, 1)

    def delete_action(self, button):
        """Delete current file/folder"""
        try:
            os.remove(self.file_path.replace("~", HOME))
        except IsADirectoryError:
            rmtree(self.file_path.replace("~", HOME))

        self.exit("clicked")

    def exit(self, message):
        """close properties GUI"""
        self.set_name = [1]
        self.destroy()
        Gtk.main_quit("delete-event")

def xdg_open(uri):
    """Open the URI using the default method"""
    args = ['xdg-open']
    path = str(uri)
    path = parse_uri(path)
    if "%20" in path:
        path = path.split("%20")
        path = " ".join(path)
    args.append(path)
    if os.fork() == 0:
        subprocess.Popen(args)
        os._exit(0)
    else:
        os.wait()

def File_Manager():
    """Start up DBus listeners"""
    try:
        DBusGMainLoop(set_as_default=True)

        bus = dbus.SessionBus()
        name = dbus.service.BusName("org.xfce.FileManager", bus)
        object = signal_handlers(bus, '/org/xfce/FileManager')

        mainloop = GLib.MainLoop()
        mainloop.run()
    except:
        pass

def show_naming_GUI(content_type, file_name):
    """Show the Naming GUI"""
    window = naming_GUI(content_type, file_name)
    window.set_decorated(True)
    window.set_resizable(False)
    window.set_position(Gtk.WindowPosition.CENTER)
    window.connect("delete-event", naming_GUI.exit)
    window.show_all()
    Gtk.main()
    return window.set_name


def show_error_GUI(content_type):
    """Show the Naming GUI"""
    window = error_GUI(content_type)
    window.set_decorated(True)
    window.set_resizable(False)
    window.set_position(Gtk.WindowPosition.CENTER)
    window.connect("delete-event", error_GUI.__quit__)
    window.show_all()
    Gtk.main()
    return window.retry_flag


def show_properties_GUI(file_path):
    """Display the properties GUI for the file at file_path"""
    window = properties_GUI(file_path)
    window.set_decorated(True)
    window.set_resizable(False)
    window.set_position(Gtk.WindowPosition.CENTER)
    window.connect("delete-event", properties_GUI.exit)
    window.show_all()
    Gtk.main()


def eprint(*args, **kwargs):
    """Make it easier for us to print to stderr"""
    print(*args, file=stderr, **kwargs)


def translate_full_octal(octal):
    """Convert Full octal perms to Human readable format, in an array

     Index 0 is USER perms
     Index 1 is GROUP perms
     Index 2 is PUBLIC perms
    """
    try:
        if len(octal) > 3:
            raise ValueError("Not a valid octal permission set. Too Long. :  %s " % (octal))
    except TypeError:
        pass
    if not isinstance(octal, str):
        octal = oct(octal)[2:]
    output = []
    for each in octal:
        output.append(octal_perms[int(each)])
    if len(octal) > 3:
        raise ValueError("Not a valid octal permission set. Too Long. :  %s " % (octal))
    return output


def launch():
    """Launch xfce4-desktop-service"""
    # Check in psutil if process is already running
    # if not, launch.
    # if so, error out
    pids = get_running_pids()
    if len(pids) == 0:
        File_Manager()


def get_running_pids():
    """Get pids of all running xfce4-desktop-service instances

    Returns an empty list of not running
    """
    pids = []
    for each in psutil.process_iter():
        if each.name() == proc_name:
            pids.append(each.pid())
    if pids is None:
        pids = []
    return pids


def parse_uri(uri):
    """Translate URIs to file paths"""
    path = urllib.parse.urlparse(uri)[2]
    path = urllib.parse.unquote(path)
    return path


def set_procname(name):
    """Set proc name"""
    libc = cdll.LoadLibrary("libc.so.6")
    buff = create_string_buffer(len(name) + 1)
    buff.value = name.encode()
    libc.prctl(15, byref(buff), 0, 0, 0)


if __name__ == '__main__':
    #get length of argv
    argc = len(argv)
    set_procname(proc_name)
    HELP = """xfce4-desktop-service, Version: %s

    -b, --background        Start service in the background.
    -h, --help              Show this help dialog and exit.
    -k, --kill              Kill currently running background process.
    -v, --version           Show the current version.

    Pass nothing to start the desktop service on the current process.""" % (VERSION)
    if argc <= 1:
        launch()
    elif ((argv[1] == "-h") or (argv[1] == "--help")):
        print(HELP)
    elif ((argv[1] == "-v") or (argv[1] == "--version")):
        print(VERSION)
    elif ((argv[1] == "-b") or (argv[1] == "--background")):
        process = subprocess.Popen("xfce4-desktop-service")
    elif ((argv[1] == "-k") or (argv[1] == "--kill")):
        # Get pids of running processes.
        pids = get_running_pids()
        if len(pids) == 0:
            eprint("ERROR: No currently running background process.")
            exit(2)
        try:
            for pid in pids:
                os.kill(int(pid), signal.SIGTERM)
        except ProcessLookupError:
            eprint("ERROR: pid %s not valid.")
    else:
        eprint("%s :  argument not recognized" % (argv[1]))
        print(HELP)
